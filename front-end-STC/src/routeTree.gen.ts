/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SyncAccountAWSLaxyImport } from './routes/SyncAccountAWS.laxy'

// Create Virtual Routes

const VpnsgoogleLazyImport = createFileRoute('/vpnsgoogle')()
const VpnsazureLazyImport = createFileRoute('/vpnsazure')()
const VirtualmachinesgoogleLazyImport = createFileRoute(
  '/virtualmachinesgoogle',
)()
const VirtualmachinesazureLazyImport = createFileRoute(
  '/virtualmachinesazure',
)()
const UsersLazyImport = createFileRoute('/users')()
const SyncazuresubscriptionLazyImport = createFileRoute(
  '/syncazuresubscription',
)()
const SyncProjectLazyImport = createFileRoute('/syncProject')()
const SubscriptionsazureLazyImport = createFileRoute('/subscriptionsazure')()
const SubscripriondetailsazureLazyImport = createFileRoute(
  '/subscripriondetailsazure',
)()
const SubnetworksazureLazyImport = createFileRoute('/subnetworksazure')()
const SnapshotsgoogleLazyImport = createFileRoute('/snapshotsgoogle')()
const SnapshotsazureLazyImport = createFileRoute('/snapshotsazure')()
const SettingsLazyImport = createFileRoute('/settings')()
const ProjectsgoogleLazyImport = createFileRoute('/projectsgoogle')()
const ProjectsDetailsLazyImport = createFileRoute('/projectsDetails')()
const NetworkssecurityazureLazyImport = createFileRoute(
  '/networkssecurityazure',
)()
const NetworksgoogleLazyImport = createFileRoute('/networksgoogle')()
const NetworksazureLazyImport = createFileRoute('/networksazure')()
const LoginTokenLazyImport = createFileRoute('/loginToken')()
const LoadbalancersgoogleLazyImport = createFileRoute('/loadbalancersgoogle')()
const LoadbalancersazureLazyImport = createFileRoute('/loadbalancersazure')()
const LanguagesLazyImport = createFileRoute('/languages')()
const HomegcpLazyImport = createFileRoute('/homegcp')()
const HomeazureLazyImport = createFileRoute('/homeazure')()
const HomeAWSLazyImport = createFileRoute('/homeAWS')()
const HomeLazyImport = createFileRoute('/home')()
const GoogleAuthLazyImport = createFileRoute('/googleAuth')()
const FirewallsgoogleLazyImport = createFileRoute('/firewallsgoogle')()
const DisksgoogleLazyImport = createFileRoute('/disksgoogle')()
const DisksazureLazyImport = createFileRoute('/disksazure')()
const CreateUserLazyImport = createFileRoute('/createUser')()
const AzureauthLazyImport = createFileRoute('/azureauth')()
const AmazonLazyImport = createFileRoute('/amazon')()
const AksclusterazureLazyImport = createFileRoute('/aksclusterazure')()
const LoginAzureLazyImport = createFileRoute('/LoginAzure')()
const LoginAWSLazyImport = createFileRoute('/LoginAWS')()
const IndexLazyImport = createFileRoute('/')()
const RoutesgoogleGoogleroutesLazyImport = createFileRoute(
  '/routes_google/google_routes',
)()
const RoutesazureAzureroutesLazyImport = createFileRoute(
  '/routes_azure/azure_routes',
)()

// Create/Update Routes

const VpnsgoogleLazyRoute = VpnsgoogleLazyImport.update({
  path: '/vpnsgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/vpnsgoogle.lazy').then((d) => d.Route))

const VpnsazureLazyRoute = VpnsazureLazyImport.update({
  path: '/vpnsazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/vpnsazure.lazy').then((d) => d.Route))

const VirtualmachinesgoogleLazyRoute = VirtualmachinesgoogleLazyImport.update({
  path: '/virtualmachinesgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/virtualmachinesgoogle.lazy').then((d) => d.Route),
)

const VirtualmachinesazureLazyRoute = VirtualmachinesazureLazyImport.update({
  path: '/virtualmachinesazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/virtualmachinesazure.lazy').then((d) => d.Route),
)

const UsersLazyRoute = UsersLazyImport.update({
  path: '/users',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users.lazy').then((d) => d.Route))

const SyncazuresubscriptionLazyRoute = SyncazuresubscriptionLazyImport.update({
  path: '/syncazuresubscription',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/syncazuresubscription.lazy').then((d) => d.Route),
)

const SyncProjectLazyRoute = SyncProjectLazyImport.update({
  path: '/syncProject',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/syncProject.lazy').then((d) => d.Route))

const SubscriptionsazureLazyRoute = SubscriptionsazureLazyImport.update({
  path: '/subscriptionsazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/subscriptionsazure.lazy').then((d) => d.Route),
)

const SubscripriondetailsazureLazyRoute =
  SubscripriondetailsazureLazyImport.update({
    path: '/subscripriondetailsazure',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/subscripriondetailsazure.lazy').then((d) => d.Route),
  )

const SubnetworksazureLazyRoute = SubnetworksazureLazyImport.update({
  path: '/subnetworksazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/subnetworksazure.lazy').then((d) => d.Route),
)

const SnapshotsgoogleLazyRoute = SnapshotsgoogleLazyImport.update({
  path: '/snapshotsgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/snapshotsgoogle.lazy').then((d) => d.Route),
)

const SnapshotsazureLazyRoute = SnapshotsazureLazyImport.update({
  path: '/snapshotsazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/snapshotsazure.lazy').then((d) => d.Route),
)

const SettingsLazyRoute = SettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const ProjectsgoogleLazyRoute = ProjectsgoogleLazyImport.update({
  path: '/projectsgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/projectsgoogle.lazy').then((d) => d.Route),
)

const ProjectsDetailsLazyRoute = ProjectsDetailsLazyImport.update({
  path: '/projectsDetails',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/projectsDetails.lazy').then((d) => d.Route),
)

const NetworkssecurityazureLazyRoute = NetworkssecurityazureLazyImport.update({
  path: '/networkssecurityazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/networkssecurityazure.lazy').then((d) => d.Route),
)

const NetworksgoogleLazyRoute = NetworksgoogleLazyImport.update({
  path: '/networksgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/networksgoogle.lazy').then((d) => d.Route),
)

const NetworksazureLazyRoute = NetworksazureLazyImport.update({
  path: '/networksazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/networksazure.lazy').then((d) => d.Route))

const LoginTokenLazyRoute = LoginTokenLazyImport.update({
  path: '/loginToken',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/loginToken.lazy').then((d) => d.Route))

const LoadbalancersgoogleLazyRoute = LoadbalancersgoogleLazyImport.update({
  path: '/loadbalancersgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/loadbalancersgoogle.lazy').then((d) => d.Route),
)

const LoadbalancersazureLazyRoute = LoadbalancersazureLazyImport.update({
  path: '/loadbalancersazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/loadbalancersazure.lazy').then((d) => d.Route),
)

const LanguagesLazyRoute = LanguagesLazyImport.update({
  path: '/languages',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/languages.lazy').then((d) => d.Route))

const HomegcpLazyRoute = HomegcpLazyImport.update({
  path: '/homegcp',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/homegcp.lazy').then((d) => d.Route))

const HomeazureLazyRoute = HomeazureLazyImport.update({
  path: '/homeazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/homeazure.lazy').then((d) => d.Route))

const HomeAWSLazyRoute = HomeAWSLazyImport.update({
  path: '/homeAWS',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/homeAWS.lazy').then((d) => d.Route))

const HomeLazyRoute = HomeLazyImport.update({
  path: '/home',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/home.lazy').then((d) => d.Route))

const GoogleAuthLazyRoute = GoogleAuthLazyImport.update({
  path: '/googleAuth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/googleAuth.lazy').then((d) => d.Route))

const FirewallsgoogleLazyRoute = FirewallsgoogleLazyImport.update({
  path: '/firewallsgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/firewallsgoogle.lazy').then((d) => d.Route),
)

const DisksgoogleLazyRoute = DisksgoogleLazyImport.update({
  path: '/disksgoogle',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/disksgoogle.lazy').then((d) => d.Route))

const DisksazureLazyRoute = DisksazureLazyImport.update({
  path: '/disksazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/disksazure.lazy').then((d) => d.Route))

const CreateUserLazyRoute = CreateUserLazyImport.update({
  path: '/createUser',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/createUser.lazy').then((d) => d.Route))

const AzureauthLazyRoute = AzureauthLazyImport.update({
  path: '/azureauth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/azureauth.lazy').then((d) => d.Route))

const AmazonLazyRoute = AmazonLazyImport.update({
  path: '/amazon',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/amazon.lazy').then((d) => d.Route))

const AksclusterazureLazyRoute = AksclusterazureLazyImport.update({
  path: '/aksclusterazure',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/aksclusterazure.lazy').then((d) => d.Route),
)

const LoginAzureLazyRoute = LoginAzureLazyImport.update({
  path: '/LoginAzure',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/LoginAzure.lazy').then((d) => d.Route))

const LoginAWSLazyRoute = LoginAWSLazyImport.update({
  path: '/LoginAWS',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/LoginAWS.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RoutesgoogleGoogleroutesLazyRoute =
  RoutesgoogleGoogleroutesLazyImport.update({
    path: '/routes_google/google_routes',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/routes_google/google_routes.lazy').then((d) => d.Route),
  )

const RoutesazureAzureroutesLazyRoute = RoutesazureAzureroutesLazyImport.update(
  {
    path: '/routes_azure/azure_routes',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/routes_azure/azure_routes.lazy').then((d) => d.Route),
)

const SyncAccountAWSLaxyRoute = SyncAccountAWSLaxyImport.update({
  path: '/SyncAccountAWS/laxy',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/LoginAWS': {
      id: '/LoginAWS'
      path: '/LoginAWS'
      fullPath: '/LoginAWS'
      preLoaderRoute: typeof LoginAWSLazyImport
      parentRoute: typeof rootRoute
    }
    '/LoginAzure': {
      id: '/LoginAzure'
      path: '/LoginAzure'
      fullPath: '/LoginAzure'
      preLoaderRoute: typeof LoginAzureLazyImport
      parentRoute: typeof rootRoute
    }
    '/aksclusterazure': {
      id: '/aksclusterazure'
      path: '/aksclusterazure'
      fullPath: '/aksclusterazure'
      preLoaderRoute: typeof AksclusterazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/amazon': {
      id: '/amazon'
      path: '/amazon'
      fullPath: '/amazon'
      preLoaderRoute: typeof AmazonLazyImport
      parentRoute: typeof rootRoute
    }
    '/azureauth': {
      id: '/azureauth'
      path: '/azureauth'
      fullPath: '/azureauth'
      preLoaderRoute: typeof AzureauthLazyImport
      parentRoute: typeof rootRoute
    }
    '/createUser': {
      id: '/createUser'
      path: '/createUser'
      fullPath: '/createUser'
      preLoaderRoute: typeof CreateUserLazyImport
      parentRoute: typeof rootRoute
    }
    '/disksazure': {
      id: '/disksazure'
      path: '/disksazure'
      fullPath: '/disksazure'
      preLoaderRoute: typeof DisksazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/disksgoogle': {
      id: '/disksgoogle'
      path: '/disksgoogle'
      fullPath: '/disksgoogle'
      preLoaderRoute: typeof DisksgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/firewallsgoogle': {
      id: '/firewallsgoogle'
      path: '/firewallsgoogle'
      fullPath: '/firewallsgoogle'
      preLoaderRoute: typeof FirewallsgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/googleAuth': {
      id: '/googleAuth'
      path: '/googleAuth'
      fullPath: '/googleAuth'
      preLoaderRoute: typeof GoogleAuthLazyImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeLazyImport
      parentRoute: typeof rootRoute
    }
    '/homeAWS': {
      id: '/homeAWS'
      path: '/homeAWS'
      fullPath: '/homeAWS'
      preLoaderRoute: typeof HomeAWSLazyImport
      parentRoute: typeof rootRoute
    }
    '/homeazure': {
      id: '/homeazure'
      path: '/homeazure'
      fullPath: '/homeazure'
      preLoaderRoute: typeof HomeazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/homegcp': {
      id: '/homegcp'
      path: '/homegcp'
      fullPath: '/homegcp'
      preLoaderRoute: typeof HomegcpLazyImport
      parentRoute: typeof rootRoute
    }
    '/languages': {
      id: '/languages'
      path: '/languages'
      fullPath: '/languages'
      preLoaderRoute: typeof LanguagesLazyImport
      parentRoute: typeof rootRoute
    }
    '/loadbalancersazure': {
      id: '/loadbalancersazure'
      path: '/loadbalancersazure'
      fullPath: '/loadbalancersazure'
      preLoaderRoute: typeof LoadbalancersazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/loadbalancersgoogle': {
      id: '/loadbalancersgoogle'
      path: '/loadbalancersgoogle'
      fullPath: '/loadbalancersgoogle'
      preLoaderRoute: typeof LoadbalancersgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/loginToken': {
      id: '/loginToken'
      path: '/loginToken'
      fullPath: '/loginToken'
      preLoaderRoute: typeof LoginTokenLazyImport
      parentRoute: typeof rootRoute
    }
    '/networksazure': {
      id: '/networksazure'
      path: '/networksazure'
      fullPath: '/networksazure'
      preLoaderRoute: typeof NetworksazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/networksgoogle': {
      id: '/networksgoogle'
      path: '/networksgoogle'
      fullPath: '/networksgoogle'
      preLoaderRoute: typeof NetworksgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/networkssecurityazure': {
      id: '/networkssecurityazure'
      path: '/networkssecurityazure'
      fullPath: '/networkssecurityazure'
      preLoaderRoute: typeof NetworkssecurityazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/projectsDetails': {
      id: '/projectsDetails'
      path: '/projectsDetails'
      fullPath: '/projectsDetails'
      preLoaderRoute: typeof ProjectsDetailsLazyImport
      parentRoute: typeof rootRoute
    }
    '/projectsgoogle': {
      id: '/projectsgoogle'
      path: '/projectsgoogle'
      fullPath: '/projectsgoogle'
      preLoaderRoute: typeof ProjectsgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/snapshotsazure': {
      id: '/snapshotsazure'
      path: '/snapshotsazure'
      fullPath: '/snapshotsazure'
      preLoaderRoute: typeof SnapshotsazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/snapshotsgoogle': {
      id: '/snapshotsgoogle'
      path: '/snapshotsgoogle'
      fullPath: '/snapshotsgoogle'
      preLoaderRoute: typeof SnapshotsgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/subnetworksazure': {
      id: '/subnetworksazure'
      path: '/subnetworksazure'
      fullPath: '/subnetworksazure'
      preLoaderRoute: typeof SubnetworksazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/subscripriondetailsazure': {
      id: '/subscripriondetailsazure'
      path: '/subscripriondetailsazure'
      fullPath: '/subscripriondetailsazure'
      preLoaderRoute: typeof SubscripriondetailsazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/subscriptionsazure': {
      id: '/subscriptionsazure'
      path: '/subscriptionsazure'
      fullPath: '/subscriptionsazure'
      preLoaderRoute: typeof SubscriptionsazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/syncProject': {
      id: '/syncProject'
      path: '/syncProject'
      fullPath: '/syncProject'
      preLoaderRoute: typeof SyncProjectLazyImport
      parentRoute: typeof rootRoute
    }
    '/syncazuresubscription': {
      id: '/syncazuresubscription'
      path: '/syncazuresubscription'
      fullPath: '/syncazuresubscription'
      preLoaderRoute: typeof SyncazuresubscriptionLazyImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersLazyImport
      parentRoute: typeof rootRoute
    }
    '/virtualmachinesazure': {
      id: '/virtualmachinesazure'
      path: '/virtualmachinesazure'
      fullPath: '/virtualmachinesazure'
      preLoaderRoute: typeof VirtualmachinesazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/virtualmachinesgoogle': {
      id: '/virtualmachinesgoogle'
      path: '/virtualmachinesgoogle'
      fullPath: '/virtualmachinesgoogle'
      preLoaderRoute: typeof VirtualmachinesgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/vpnsazure': {
      id: '/vpnsazure'
      path: '/vpnsazure'
      fullPath: '/vpnsazure'
      preLoaderRoute: typeof VpnsazureLazyImport
      parentRoute: typeof rootRoute
    }
    '/vpnsgoogle': {
      id: '/vpnsgoogle'
      path: '/vpnsgoogle'
      fullPath: '/vpnsgoogle'
      preLoaderRoute: typeof VpnsgoogleLazyImport
      parentRoute: typeof rootRoute
    }
    '/SyncAccountAWS/laxy': {
      id: '/SyncAccountAWS/laxy'
      path: '/SyncAccountAWS/laxy'
      fullPath: '/SyncAccountAWS/laxy'
      preLoaderRoute: typeof SyncAccountAWSLaxyImport
      parentRoute: typeof rootRoute
    }
    '/routes_azure/azure_routes': {
      id: '/routes_azure/azure_routes'
      path: '/routes_azure/azure_routes'
      fullPath: '/routes_azure/azure_routes'
      preLoaderRoute: typeof RoutesazureAzureroutesLazyImport
      parentRoute: typeof rootRoute
    }
    '/routes_google/google_routes': {
      id: '/routes_google/google_routes'
      path: '/routes_google/google_routes'
      fullPath: '/routes_google/google_routes'
      preLoaderRoute: typeof RoutesgoogleGoogleroutesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  LoginAWSLazyRoute,
  LoginAzureLazyRoute,
  AksclusterazureLazyRoute,
  AmazonLazyRoute,
  AzureauthLazyRoute,
  CreateUserLazyRoute,
  DisksazureLazyRoute,
  DisksgoogleLazyRoute,
  FirewallsgoogleLazyRoute,
  GoogleAuthLazyRoute,
  HomeLazyRoute,
  HomeAWSLazyRoute,
  HomeazureLazyRoute,
  HomegcpLazyRoute,
  LanguagesLazyRoute,
  LoadbalancersazureLazyRoute,
  LoadbalancersgoogleLazyRoute,
  LoginTokenLazyRoute,
  NetworksazureLazyRoute,
  NetworksgoogleLazyRoute,
  NetworkssecurityazureLazyRoute,
  ProjectsDetailsLazyRoute,
  ProjectsgoogleLazyRoute,
  SettingsLazyRoute,
  SnapshotsazureLazyRoute,
  SnapshotsgoogleLazyRoute,
  SubnetworksazureLazyRoute,
  SubscripriondetailsazureLazyRoute,
  SubscriptionsazureLazyRoute,
  SyncProjectLazyRoute,
  SyncazuresubscriptionLazyRoute,
  UsersLazyRoute,
  VirtualmachinesazureLazyRoute,
  VirtualmachinesgoogleLazyRoute,
  VpnsazureLazyRoute,
  VpnsgoogleLazyRoute,
  SyncAccountAWSLaxyRoute,
  RoutesazureAzureroutesLazyRoute,
  RoutesgoogleGoogleroutesLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/LoginAWS",
        "/LoginAzure",
        "/aksclusterazure",
        "/amazon",
        "/azureauth",
        "/createUser",
        "/disksazure",
        "/disksgoogle",
        "/firewallsgoogle",
        "/googleAuth",
        "/home",
        "/homeAWS",
        "/homeazure",
        "/homegcp",
        "/languages",
        "/loadbalancersazure",
        "/loadbalancersgoogle",
        "/loginToken",
        "/networksazure",
        "/networksgoogle",
        "/networkssecurityazure",
        "/projectsDetails",
        "/projectsgoogle",
        "/settings",
        "/snapshotsazure",
        "/snapshotsgoogle",
        "/subnetworksazure",
        "/subscripriondetailsazure",
        "/subscriptionsazure",
        "/syncProject",
        "/syncazuresubscription",
        "/users",
        "/virtualmachinesazure",
        "/virtualmachinesgoogle",
        "/vpnsazure",
        "/vpnsgoogle",
        "/SyncAccountAWS/laxy",
        "/routes_azure/azure_routes",
        "/routes_google/google_routes"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/LoginAWS": {
      "filePath": "LoginAWS.lazy.tsx"
    },
    "/LoginAzure": {
      "filePath": "LoginAzure.lazy.tsx"
    },
    "/aksclusterazure": {
      "filePath": "aksclusterazure.lazy.tsx"
    },
    "/amazon": {
      "filePath": "amazon.lazy.tsx"
    },
    "/azureauth": {
      "filePath": "azureauth.lazy.tsx"
    },
    "/createUser": {
      "filePath": "createUser.lazy.tsx"
    },
    "/disksazure": {
      "filePath": "disksazure.lazy.tsx"
    },
    "/disksgoogle": {
      "filePath": "disksgoogle.lazy.tsx"
    },
    "/firewallsgoogle": {
      "filePath": "firewallsgoogle.lazy.tsx"
    },
    "/googleAuth": {
      "filePath": "googleAuth.lazy.tsx"
    },
    "/home": {
      "filePath": "home.lazy.tsx"
    },
    "/homeAWS": {
      "filePath": "homeAWS.lazy.tsx"
    },
    "/homeazure": {
      "filePath": "homeazure.lazy.tsx"
    },
    "/homegcp": {
      "filePath": "homegcp.lazy.tsx"
    },
    "/languages": {
      "filePath": "languages.lazy.tsx"
    },
    "/loadbalancersazure": {
      "filePath": "loadbalancersazure.lazy.tsx"
    },
    "/loadbalancersgoogle": {
      "filePath": "loadbalancersgoogle.lazy.tsx"
    },
    "/loginToken": {
      "filePath": "loginToken.lazy.tsx"
    },
    "/networksazure": {
      "filePath": "networksazure.lazy.tsx"
    },
    "/networksgoogle": {
      "filePath": "networksgoogle.lazy.tsx"
    },
    "/networkssecurityazure": {
      "filePath": "networkssecurityazure.lazy.tsx"
    },
    "/projectsDetails": {
      "filePath": "projectsDetails.lazy.tsx"
    },
    "/projectsgoogle": {
      "filePath": "projectsgoogle.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/snapshotsazure": {
      "filePath": "snapshotsazure.lazy.tsx"
    },
    "/snapshotsgoogle": {
      "filePath": "snapshotsgoogle.lazy.tsx"
    },
    "/subnetworksazure": {
      "filePath": "subnetworksazure.lazy.tsx"
    },
    "/subscripriondetailsazure": {
      "filePath": "subscripriondetailsazure.lazy.tsx"
    },
    "/subscriptionsazure": {
      "filePath": "subscriptionsazure.lazy.tsx"
    },
    "/syncProject": {
      "filePath": "syncProject.lazy.tsx"
    },
    "/syncazuresubscription": {
      "filePath": "syncazuresubscription.lazy.tsx"
    },
    "/users": {
      "filePath": "users.lazy.tsx"
    },
    "/virtualmachinesazure": {
      "filePath": "virtualmachinesazure.lazy.tsx"
    },
    "/virtualmachinesgoogle": {
      "filePath": "virtualmachinesgoogle.lazy.tsx"
    },
    "/vpnsazure": {
      "filePath": "vpnsazure.lazy.tsx"
    },
    "/vpnsgoogle": {
      "filePath": "vpnsgoogle.lazy.tsx"
    },
    "/SyncAccountAWS/laxy": {
      "filePath": "SyncAccountAWS.laxy.tsx"
    },
    "/routes_azure/azure_routes": {
      "filePath": "routes_azure/azure_routes.lazy.tsx"
    },
    "/routes_google/google_routes": {
      "filePath": "routes_google/google_routes.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
